import{j as s}from"./jsx-runtime-CkxqCPlQ.js";import{r as l}from"./index-DJO9vBfz.js";const T="_video_mtj7p_1",j="_logoMask_mtj7p_8",h="_logoContainer_mtj7p_18",w="_logo_mtj7p_8",I="_title_mtj7p_32",S="_loading_mtj7p_37",b="_videoContainer_mtj7p_44",M="_videoImp_mtj7p_48",n={video:T,logoMask:j,logoContainer:h,logo:w,title:I,loading:S,videoContainer:b,videoImp:M},x=async t=>await(await fetch(t.url,{body:JSON.stringify(t.data),headers:t.headers})).json(),L=t=>{const e=new ZLMRTCClient.Endpoint({element:document.getElementById(t.id),debug:!0,zlmsdpUrl:t.url,simulecast:!1,useCamera:!1,audioEnable:!0,videoEnable:!0,recvOnly:!0,usedatachannel:!1});return e.on(ZLMRTCClient.Events.WEBRTC_ICE_CANDIDATE_ERROR,a=>{console.error("ICE 协商出错"),eventcallbacK("ICE ERROR","ICE 协商出错")}),e.on(ZLMRTCClient.Events.WEBRTC_ON_REMOTE_STREAMS,a=>{console.log("播放成功",a.streams),t.onSuccess&&t.onSuccess(),eventcallbacK("playing","播放成功")}),e.on(ZLMRTCClient.Events.WEBRTC_OFFER_ANWSER_EXCHANGE_FAILED,a=>{console.error("offer anwser 交换失败",a),eventcallbacK("OFFER ANSWER ERROR ","offer anwser 交换失败"),a.code==-400&&a.msg=="流不存在"&&console.log("流不存在")}),e.on(ZLMRTCClient.Events.WEBRTC_ON_LOCAL_STREAM,a=>{eventcallbacK("LOCAL STREAM","获取到了本地流")}),e},R=l.forwardRef(function(e,a){const{id:_,url:c,headers:f,onClick:d,className:v,loadingState:E,muted:y}=e,[C,u]=l.useState(!1),[N,m]=l.useState(!1);l.useImperativeHandle(a,()=>({play:r}),[]),l.useEffect(()=>{r(c,f)},[c]),l.useEffect(()=>()=>{o&&o.close(),o=null},[]);const r=async(i,p={})=>{if(i.trim()===""){o&&o.close(),o=null,u(!1);return}m(!0);const g=await x({url:i,headers:p});g.url?o=L({url:g.url,id:_,onSuccess:()=>{u(!0),m(!1)}}):r(i,p)};let o=null;return s.jsxs("div",{onClick:()=>{d&&d()},className:`${n.video} ${v}`,children:[!C&&s.jsx("div",{className:n.logoMask,children:N?s.jsx("div",{className:n.loading,children:E??"加载中..."}):s.jsxs("div",{className:n.logoContainer,children:[s.jsx("div",{className:n.logo,children:e.logo}),s.jsx("div",{className:n.title,children:e.title})]})}),s.jsx("div",{className:n.videoContainer,children:s.jsx("video",{autoPlay:!0,controls:!0,className:n.videoImp,id:e.id,muted:y})})]})});R.displayName="VideoPlay";R.__docgenInfo={description:"",methods:[{name:"play",docblock:null,modifiers:["async"],params:[{name:"url",optional:!1,type:{name:"string"}},{name:"headers",optional:!0,type:null}],returns:null}],displayName:"VideoPlay",props:{logo:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"播放器logo"},title:{required:!1,tsType:{name:"string"},description:"播放器的title"},id:{required:!0,tsType:{name:"string"},description:"id video组件的id后面，后面可以用于获取video实例"},url:{required:!0,tsType:{name:"string"},description:"发请求的地址，传入一个地址组件内部会自动发起请求播放视频"},loadingState:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:'播放时候的loading态，传入一个ReactNode默认为 "加载中..." 字样'},headers:{required:!1,tsType:{name:"any"},description:"请求头用于发起请求时候携带一些东西，比如token"},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"点击时候调用的方法"},className:{required:!1,tsType:{name:"string"},description:"类名"},muted:{required:!1,tsType:{name:"boolean"},description:"是否静音播放"}}};const q=""+new URL("react-CHdo91hT.svg",import.meta.url).href;export{R as V,q as r};
